Elm.FibonacciBars = Elm.FibonacciBars || {};
Elm.FibonacciBars.make = function (_elm) {
   "use strict";
   _elm.FibonacciBars = _elm.FibonacciBars || {};
   if (_elm.FibonacciBars.values)
   return _elm.FibonacciBars.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "FibonacciBars",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Fibonacci = Elm.Fibonacci.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var color = function (n) {
      return function () {
         var colors = _L.fromArray([$Color.red
                                   ,$Color.orange
                                   ,$Color.green
                                   ,$Color.blue
                                   ,$Color.purple
                                   ,$Color.brown]);
         return $Maybe.withDefault($Color.red)($List.head(A2($List.drop,
         A2($Basics._op["%"],
         n,
         $List.length(colors)),
         colors)));
      }();
   };
   var bar = function (_v0) {
      return function () {
         switch (_v0.ctor)
         {case "_Tuple2":
            return A2($Graphics$Element.flow,
              $Graphics$Element.right,
              _L.fromArray([A3($Graphics$Collage.collage,
                           _v0._1 * 5,
                           5,
                           _L.fromArray([A2($Graphics$Collage.filled,
                           color(_v0._0),
                           A2($Graphics$Collage.rect,
                           $Basics.toFloat(_v0._1) * 5,
                           5))]))
                           ,$Graphics$Element.show(_v0._1)]));}
         _U.badCase($moduleName,
         "between lines 19 and 22");
      }();
   };
   var main = $Graphics$Element.flow($Graphics$Element.down)(A2($List.map,
   bar,
   $Fibonacci.fibonacciWithIndices(10)));
   _elm.FibonacciBars.values = {_op: _op
                               ,color: color
                               ,bar: bar
                               ,main: main};
   return _elm.FibonacciBars.values;
};